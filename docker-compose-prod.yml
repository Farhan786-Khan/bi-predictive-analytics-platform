version: '3.8'

services:
  # Production API with multiple replicas
  api:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bi-api-prod
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - DATABASE_URL=postgresql://bi_user:${POSTGRES_PASSWORD}@postgres:5432/bi_platform_prod
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - WORKERS=4
    depends_on:
      - postgres
      - redis
    networks:
      - bi-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Dashboard
  dashboard:
    build: 
      context: .
      dockerfile: Dockerfile
      target: dashboard
    container_name: bi-dashboard-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - DATABASE_URL=postgresql://bi_user:${POSTGRES_PASSWORD}@postgres:5432/bi_platform_prod
      - REDIS_URL=redis://redis:6379
      - API_BASE_URL=http://nginx:80/api
      - ENVIRONMENT=production
    depends_on:
      - api
      - postgres
      - redis
    networks:
      - bi-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production PostgreSQL with optimized settings
  postgres:
    image: postgres:15-alpine
    container_name: bi-postgres-prod
    environment:
      POSTGRES_DB: bi_platform_prod
      POSTGRES_USER: bi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/postgres_prod_config.sql:/docker-entrypoint-initdb.d/99-postgres-config.sql
      - ./backups:/backups
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bi_user -d bi_platform_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: bi-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bi-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - api
      - dashboard
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Celery Worker for Background Tasks
  celery-worker:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bi-celery-worker-prod
    command: celery -A src.core.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://bi_user:${POSTGRES_PASSWORD}@postgres:5432/bi_platform_prod
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat Scheduler
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bi-celery-beat-prod
    command: celery -A src.core.celery beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=postgresql://bi_user:${POSTGRES_PASSWORD}@postgres:5432/bi_platform_prod
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Production Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bi-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=10GB'
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bi-grafana-prod
    ports:
      - "3000:3000"
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.sendgrid.net:587
      - GF_SMTP_USER=apikey
      - GF_SMTP_PASSWORD=${SENDGRID_API_KEY}
      - GF_SMTP_FROM_ADDRESS=${FROM_EMAIL}
    depends_on:
      - prometheus
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Aggregation - Fluentd (Optional)
  fluentd:
    build: ./logging/fluentd
    container_name: bi-fluentd-prod
    volumes:
      - ./logging/fluentd/conf:/fluentd/etc
      - ./logs:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - bi-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/bi-platform/data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/bi-platform/data/redis
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/bi-platform/data/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/bi-platform/data/grafana

networks:
  bi-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production deployment configurations
configs:
  nginx_config:
    file: ./nginx/prod.conf
  prometheus_config:
    file: ./monitoring/prometheus/prod.yml

secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  secret_key:
    external: true